<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>profiling | Julia Piaskowski</title>
    <link>/tags/profiling/</link>
      <atom:link href="/tags/profiling/index.xml" rel="self" type="application/rss+xml" />
    <description>profiling</description>
    <generator>Source Themes Academic (https://sourcethemes.com/academic/)</generator><language>en-us</language><copyright>Julia Piaskowski, 2020</copyright><lastBuildDate>Wed, 19 Sep 2018 10:50:02 -0700</lastBuildDate>
    <image>
      <url>img/map[gravatar:%!s(bool=false) shape:circle]</url>
      <title>profiling</title>
      <link>/tags/profiling/</link>
    </image>
    
    <item>
      <title>Faster R Scripts through Code Profiling</title>
      <link>/post/4_code_profiling/</link>
      <pubDate>Wed, 19 Sep 2018 10:50:02 -0700</pubDate>
      <guid>/post/4_code_profiling/</guid>
      <description>&lt;h5 id=&#34;sources&#34;&gt;Sources&lt;/h5&gt;
&lt;p&gt;Thomas Lumley, Github repo 
&lt;a href=&#34;https://github.com/tslumley/useRfasteR&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;useRfasteR&lt;/a&gt;
&lt;br&gt;
Hadley Wickham, 
&lt;a href=&#34;http://adv-r.had.co.nz/Profiling.html&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;Profiling&lt;/a&gt;
, &lt;em&gt;Advanced R&lt;/em&gt;&lt;br&gt;
Dirk Eddelbuettel, 
&lt;a href=&#34;http://www.rcpp.org/&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;Rcpp&lt;/a&gt;
&lt;/p&gt;
&lt;h4 id=&#34;the-process-for-improving-code&#34;&gt;The Process for Improving Code:&lt;/h4&gt;
&lt;p&gt;(quote from &lt;em&gt;Advanced R&lt;/em&gt;)&lt;/p&gt;
&lt;blockquote&gt;
&lt;ol&gt;
&lt;li&gt;Find the biggest bottleneck (the slowest part of your code).&lt;/li&gt;
&lt;li&gt;Try to eliminate it (you may not succeed but that’s ok).&lt;/li&gt;
&lt;li&gt;Repeat until your code is “fast enough.”&lt;/li&gt;
&lt;/ol&gt;
&lt;/blockquote&gt;
&lt;p&gt;&lt;strong&gt;Easy peasy, right???&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;./owl.png&#34; alt=&#34;owl&#34;&gt;&lt;/p&gt;
&lt;h4 id=&#34;some-general-guidelines-for-speeding-up-r-code&#34;&gt;Some general guidelines for speeding up R code&lt;/h4&gt;
&lt;ol&gt;
&lt;li&gt;Use data frames less - they are expensive to create, often copied in whole when modified, and their rownames attribute can really slow things down.&lt;/li&gt;
&lt;li&gt;Be wary of using functions that copy objects in whole: c(), append(), cbind(), rbind(), or paste(). When used in loops, you can get a massive proliferation of objects in memory.&lt;/li&gt;
&lt;li&gt;Use vectorised functions:
&lt;ul&gt;
&lt;li&gt;apply, lapply, sapply, vapply, tapply, mapply&lt;/li&gt;
&lt;li&gt;rowSums, colSums, rowMeans, colMeans, cumsum, diff&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Base functions are designed to handle wildly different input. Consider rewriting base functions for highly repetitive tasks.&lt;/li&gt;
&lt;li&gt;Use parallel::mclapply for parallelising functions.&lt;/li&gt;
&lt;li&gt;Consider an optimized matrix algebra library (beyond BLAS) for better performance (e.g. 
&lt;a href=&#34;https://developer.apple.com/documentation/accelerate/blas&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;Apple vecLib BLAS&lt;/a&gt;
, 
&lt;a href=&#34;https://www.openblas.net/&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;openBLAS&lt;/a&gt;
).&lt;/li&gt;
&lt;li&gt;If you work with sparse matrices, use tools for them like the package &amp;lsquo;Matrix&amp;rsquo;.&lt;/li&gt;
&lt;li&gt;For huge objects, consider storing the information in a database and accessing it with &amp;lsquo;dbplyr&amp;rsquo;. The packages &amp;lsquo;dbglm&amp;rsquo; and &amp;lsquo;tidypredict&amp;rsquo; will also do model fitting with data inside a database.&lt;/li&gt;
&lt;li&gt;Another solution for large objects are specialized formats like 
&lt;a href=&#34;https://portal.hdfgroup.org/display/support&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;HDF5&lt;/a&gt;
 or 
&lt;a href=&#34;https://www.unidata.ucar.edu/software/netcdf/&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;netCDF&lt;/a&gt;
.&lt;/li&gt;
&lt;li&gt;Take advantage of the Rcpp suite of programs - not just for C/C++ programmers (e.g. RcppArmadillo::fastlm).&lt;/li&gt;
&lt;li&gt;Use an alternative implementation of R (e.g., 
&lt;a href=&#34;https://github.com/oracle/fastr]&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;fastR&lt;/a&gt;
, 
&lt;a href=&#34;http://www.pqr-project.org/&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;pqR&lt;/a&gt;
).&lt;/li&gt;
&lt;li&gt;Check your code with benchmarking!!!&lt;/li&gt;
&lt;/ol&gt;
&lt;h4 id=&#34;lets-do-some-benchmarking&#34;&gt;Let&amp;rsquo;s do some benchmarking!&lt;/h4&gt;
&lt;p&gt;Important: don&amp;rsquo;t (re)install &amp;lsquo;compiler&amp;rsquo;; you should just be able to load it in R v3.5 and later.&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-{r}&#34;&gt;pck &amp;lt;- c(&amp;quot;pryr&amp;quot;,&amp;quot;microbenchmark&amp;quot;, &amp;quot;profvis&amp;quot;, &amp;quot;compiler&amp;quot;, &amp;quot;mnormt&amp;quot;)
invisible(lapply(pck, library, character.only = T))
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;First, Turn off the just-in-time compiler. Note that return value is what the JIT was set at previously (default = 3).&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;enableJIT(0)
&lt;/code&gt;&lt;/pre&gt;
&lt;h5 id=&#34;the-microbenchmark-function&#34;&gt;The microbenchmark function&lt;/h5&gt;
&lt;ul&gt;
&lt;li&gt;for evaluating small snippets of code&lt;/li&gt;
&lt;li&gt;below is a comparison of several approaches to calculating a mean&lt;/li&gt;
&lt;/ul&gt;
&lt;pre&gt;&lt;code class=&#34;language-{r}&#34;&gt;a &amp;lt;- function() {
  m &amp;lt;- sample(1:100, 2)
  data.x &amp;lt;- lapply(m, function(x) rnorm(1e4, mean = x))
  do.call(&amp;quot;cbind&amp;quot;, data.x)
}

some_data &amp;lt;- a()
dim(some_data)

microbenchmark(
  mean_loop = apply(some_data, 2, mean),
  mean_vec = colMeans(some_data),
  mean_manual = apply(some_data, 2, function(x) sum(x)/length(x)),
  mean_manual_ultra = apply(some_data, 2, function(x){
    total = 0
    n = 0
    i = 1
    while(!is.na(x[i])) {
      total = total + x[i]
      n = n+1
      i = i+1
    }
    total/n
  })
)
&lt;/code&gt;&lt;/pre&gt;
&lt;h5 id=&#34;prevent-multiple-dispatch&#34;&gt;Prevent multiple dispatch:&lt;/h5&gt;
&lt;ul&gt;
&lt;li&gt;the function mean() is meant to handle several different types of data&lt;/li&gt;
&lt;li&gt;specifying the method (thus implying a certain type of input) can speed up the process for small data sets&lt;/li&gt;
&lt;li&gt;the function mean() calls a different function depending on the object specified:&lt;/li&gt;
&lt;/ul&gt;
&lt;pre&gt;&lt;code class=&#34;language-{r}&#34;&gt;methods(mean)

x1 &amp;lt;- list(e2 = runif(1e2), e4 = runif(1e4), e6 = runif(1e6))

lapply(x1, function(x)
  microbenchmark(
    mean(x),
    mean.default(x)
  )
)
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;I suspect the improvement in speed for smaller objects but larger objects is related to big O notation &amp;ndash; these smaller objects are impacted by constants&lt;/p&gt;
&lt;p&gt;Other approaches for finding source code:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-{r}&#34;&gt;# tracking package type, etc
otype(mean)
ftype(mean)
showMethods(mean) #for S4
methods(mean)
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;The function methods() does not always work, but there are alternatives:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-{r}&#34;&gt;methods(var)
getAnywhere(var)
&lt;/code&gt;&lt;/pre&gt;
&lt;h5 id=&#34;find-the-bottlenecks-with-rprof&#34;&gt;Find the bottlenecks with Rprof()&lt;/h5&gt;
&lt;ul&gt;
&lt;li&gt;writes stack calls to disk along with memory usage and vector duplication&lt;/li&gt;
&lt;li&gt;you create a .prof file to do this and then close it when done with profiling&lt;/li&gt;
&lt;/ul&gt;
&lt;pre&gt;&lt;code class=&#34;language-{r}&#34;&gt;Rprof(&amp;quot;permute.prof&amp;quot;, memory.profiling = T)

sigma.mv &amp;lt;- diag(1, nrow = 5, ncol = 5)
sigma.mv[upper.tri(sigma.mv)] = 0.5
sigma.mv[lower.tri(sigma.mv)] = 0.5

mvn.data &amp;lt;- rmnorm(1e3, mean = rep(0, 5), varcov = sigma.mv)
colnames(mvn.data) &amp;lt;- c(paste0(&amp;quot;x&amp;quot;,1:5))

kmeans.Ftest &amp;lt;- function(kmean_obj) {
  df.1 = length(kmean_obj$size) - 1
  df.2 = length(kmean_obj$cluster) - length(kmean_obj$size)
  betw_ms &amp;lt;- kmean_obj$tot.withinss/df.1
  with_ms &amp;lt;- kmean_obj$betweenss/df.2
  fratio = betw_ms/with_ms
  pval &amp;lt;- pf(fratio, df1 = df.2, df2 = df.1, lower.tail = F)
  stuff = c(fratio, df.1, df.2, pval)
  names(stuff) &amp;lt;- c(&#39;F-ratio&#39;, &#39;df 1&#39;,&#39;df 2&#39;, &#39;p-value&#39;)
  return(stuff)
}

kmeans.optimiz &amp;lt;- lapply(2:10, function(x) {
    results = kmeans(mvn.data, centers = x, nstart = 15, algorithm = &amp;quot;MacQueen&amp;quot;,
                        iter.max = 50)
    kmeans.Ftest(results)
})

kmeans.final &amp;lt;- do.call(&amp;quot;rbind&amp;quot;, kmeans.optimiz)

Rprof(NULL)
summaryRprof(&amp;quot;permute.prof&amp;quot;) #, memory = &amp;quot;both&amp;quot;)
&lt;/code&gt;&lt;/pre&gt;
&lt;h5 id=&#34;use-profvis-to-visualize-performance&#34;&gt;Use profvis to visualize performance&lt;/h5&gt;
&lt;ul&gt;
&lt;li&gt;nice graphical output&lt;/li&gt;
&lt;li&gt;native in RStudio (there is extensive 
&lt;a href=&#34;https://support.rstudio.com/hc/en-us/articles/218221837-Profiling-with-RStudio&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;documentation&lt;/a&gt;
)&lt;/li&gt;
&lt;li&gt;you can view output in browser&lt;/li&gt;
&lt;/ul&gt;
&lt;pre&gt;&lt;code class=&#34;language-{r}&#34;&gt;p &amp;lt;- profvis({
mean_loop = apply(some_data, 2, mean)
mean_vec = colMeans(some_data)
mean_manual = apply(some_data, 2, function(x) sum(x)/length(x))
mean_manual_ultra = apply(some_data, 2, function(x){
  total = 0
  n = 0
  i = 1
  while(!is.na(x[i])) {
      total = total + x[i]
      n = n+1
      i = i+1
    }
    total/n
  })
})
htmlwidgets::saveWidget(p, &amp;quot;profile.html&amp;quot;)

browseURL(&amp;quot;profile.html&amp;quot;)
&lt;/code&gt;&lt;/pre&gt;
&lt;h5 id=&#34;explore-source-code&#34;&gt;Explore source code&lt;/h5&gt;
&lt;p&gt;&lt;strong&gt;How to access function source code&lt;/strong&gt;
(if you didn&amp;rsquo;t write the function yourself)&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;Type the function name (without parentheses): &lt;code&gt;eigen&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;Find namespace and methods associated: &lt;code&gt;methods(&amp;quot;princomp&amp;quot;); getAnywhere(&amp;quot;princomp.default&amp;quot;)&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;Use pryr::show_c_source() to search for C code on GitHub (which may or may not be helpful)&lt;/li&gt;
&lt;li&gt;Download the entire package and explore the code&lt;/li&gt;
&lt;/ol&gt;
&lt;pre&gt;&lt;code class=&#34;language-{r}&#34;&gt;svd
La.svd

try(show_c_source(.Internal(La_svd(x))))
show_c_source(.Internal(mean(x)))

download.packages(&amp;quot;broman&amp;quot;, repos = &amp;quot;https://cloud.r-project.org&amp;quot;,
  destdir = getwd(),type = &amp;quot;source&amp;quot;)
&lt;/code&gt;&lt;/pre&gt;
&lt;h5 id=&#34;trace-objects-copied&#34;&gt;Trace objects copied&lt;/h5&gt;
&lt;ul&gt;
&lt;li&gt;use tracemem() to track particular objects&lt;/li&gt;
&lt;/ul&gt;
&lt;pre&gt;&lt;code class=&#34;language-{r}&#34;&gt;a &amp;lt;- letters[sample(10)]
tracemem(a)
a[1] &amp;lt;- &amp;quot;Z&amp;quot;
b &amp;lt;- a[1:5]  # not copied
&lt;/code&gt;&lt;/pre&gt;
&lt;h5 id=&#34;memory&#34;&gt;Memory&lt;/h5&gt;
&lt;ul&gt;
&lt;li&gt;How much memory is being used? Note that R requests memory from your computer in big chunks then manages it itself.&lt;/li&gt;
&lt;/ul&gt;
&lt;pre&gt;&lt;code class=&#34;language-{r}&#34;&gt;mem_used()
object.size(x1) #base
object_size(x1) #pryr
compare_size(x1) #between base R and pryr
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Read the 
&lt;a href=&#34;https://www.rdocumentation.org/packages/pryr/versions/0.1.4&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;documentation for pryr functions&lt;/a&gt;
 for more useful functions.&lt;/p&gt;
&lt;p&gt;Now that we are all done, turn the JIT compiler back on:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-{r}&#34;&gt;enableJIT(3)
&lt;/code&gt;&lt;/pre&gt;
&lt;h5 id=&#34;more-tips-from-advanced-r&#34;&gt;More Tips from &lt;em&gt;Advanced R&lt;/em&gt;&lt;/h5&gt;
&lt;p&gt;These are designed to reduce internal checks&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;read.csv(): specify known column types with colClasses.&lt;/li&gt;
&lt;li&gt;factor(): specify known levels with levels.&lt;/li&gt;
&lt;li&gt;cut(): don&amp;rsquo;t generate labels with labels = FALSE if you don&amp;rsquo;t need them, or, even better, use findInterval().&lt;/li&gt;
&lt;li&gt;unlist(x, use.names = FALSE) is much faster than unlist(x).&lt;/li&gt;
&lt;li&gt;interaction(): if you only need combinations that exist in the data, use drop = TRUE.&lt;/li&gt;
&lt;/ol&gt;
&lt;h3 id=&#34;remember&#34;&gt;Remember!&lt;/h3&gt;
&lt;p&gt;&lt;img src=&#34;./xkcd1205.png&#34; alt=&#34;xkcd1205&#34;&gt;&lt;/p&gt;
&lt;p&gt;
&lt;a href=&#34;https://xkcd.com/1205/&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;xckd comic&lt;/a&gt;
&lt;/p&gt;
</description>
    </item>
    
  </channel>
</rss>
